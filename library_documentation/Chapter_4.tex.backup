\chapter{Graph Based Anomaly Detection Technique}

\section{Introduction}

This technique was introduced by [1]. We have used is R implementation given by 
authors of this book [2]. So, here by using python script, we will be just 
calling R script with appropriate arguments and will be using result provided 
by that script.

Graph based anomaly detection technique considers each day as a  node of a 
graph. Similar nodes are connected to each other by some weight. Similarity of 
nodes are calculated by making use of the values of that node i.e. value(s) of 
timeseries on that date. Based on this similarity, edge weights are also 
assigned. Than random walk algorithm is applied on this graph structure and 
connectivity value of each node is calculated. Graph nodes having the least 
connectivity values are reported as anomaly.

Note that previous techniques, like Window 
Correlation, Slope Based and Linear Regression techniques, can take only 2 time 
series as input. They also don't consider historical values, trend or 
seasonality. It just makes prediction on the given present data. Where as, this 
Graph based anomaly detection technique, can take multiple time series as input 
and also considers trends, seasonality as well, as explained in research paper 
[1].

So, here, we take multiple time series as input. Out of them, one will be 
dependent on rest of the others. We will call R script, it will print result in 
one csv file. We read that CSV file and return result. Note that here we do not 
have threshold value. We just give number of points with the least connectivity 
value and function returns them. If in future, one wants to add threshold value 
on connectivity than function can be modified according to that as well.

\section{Related Functions}

\subsection{graphBasedAnomalyCall(dependentVar, numberOfVals, timeSeriesFileNames)}

This function calls the R Script ``graphBasedAnomaly.R''. 

\begin{itemize}
 \item Input Parameters
 
 \begin{enumerate}
  \item x\_series \textit{(list)} : List of float values representing "x" 
variable (independent variable)
  \item y\_series \textit{(list)} : List of float values representing "y" 
variable (independent variable)
  \item param \textit{(int, 1 or 0 or -1)} : \\

 \end{enumerate}

 \item Output \textit{(Tuple)} : \\

 
\end{itemize}


\section{Description}

Putting all together, here is the summary:\\
\\
