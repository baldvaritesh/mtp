require(forecast)
require(vars)

MultivariateAnomaly <- function(fileName,hd= FALSE) {
var.data= read.csv(file = fileName,header=hd)
head(var.data)

centre.wp = ts(var.data[2], frequency=365, start=c(2006), end=c(2015))
centre.rp = ts(var.data[3], frequency=365, start=c(2006), end=c(2015))
centre.arrival = ts(var.data[4], frequency=365, start=c(2006), end=c(2015))
noOfPredictions <- 3000

WPcData = window(centre.wp, start=c(2006), end=c(2010))
RPcData = window(centre.rp, start=c(2006), end=c(2010))
ArrivalcData = window(centre.arrival, start=c(2006), end=c(2010))
onion.ts = cbind(WPcData, RPcData,ArrivalcData)
plot(onion.ts)

ndiffs(WPcData, alpha = 0.05, test = c("adf"))
ndiffs(RPcData, alpha = 0.05, test = c("adf"))
ndiffs(ArrivalcData, alpha = 0.05, test = c("adf"))

d.WPcData = diff(WPcData)
d.RPcData = diff(RPcData)
d.ArrivalcData = diff(ArrivalcData)

onion2.ts = cbind(d.WPcData, d.RPcData,d.ArrivalcData)
plot(onion2.ts)

VARselect(onion2.ts, lag.max=60)$selection

var = VAR(onion.ts, p=29)
#serial.test(centre.wp, lags.pt=60, type="PT.asymptotic")

summary(var, equation="d.WPcData")
p <- predict(var, n.ahead=noOfPredictions, ci=0.95)

ArrivalcData = window(centre.arrival, start=c(2010), end=c(2015))
padNeeded <- noOfPredictions - length(ArrivalcData)
paddedList <- rep(-1,padNeeded)

ArrivalForecast <- as.data.frame(p$fcst[3])
ArrivalForecast[5] <- append(ArrivalcData,paddedList)

WPcData = window(centre.wp, start=c(2010), end=c(2015))
WholeSaleForecast <- as.data.frame(p$fcst[1])
WholeSaleForecast[5] <- append(WPcData,paddedList)

RPcData = window(centre.rp, start=c(2010), end=c(2015))
RetailForecast <- as.data.frame(p$fcst[2])
RetailForecast[5] <- append(RPcData ,paddedList)

write.csv(WholeSaleForecast,"/home/kapil/Desktop/mtp/library/testingCSV/Wolesaleresults.csv",row.names=TRUE)
write.csv(RetailForecast,"/home/kapil/Desktop/mtp/library/testingCSV/Retailresults.csv",row.names=TRUE)
write.csv(ArrivalForecast,"/home/kapil/Desktop/mtp/library/testingCSV/Arrivalresults.csv",row.names=TRUE)

}

myArgs <- commandArgs(trailingOnly = TRUE)
myArgs[2]
if(myArgs[2]=='TRUE'){
	x <- MultivariateAnomaly(myArgs[1],TRUE)
} else {
	x <- MultivariateAnomaly(myArgs[1],FALSE)
}
